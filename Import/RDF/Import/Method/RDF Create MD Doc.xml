<AML>
 <Item type="Method" id="8A83A5041BF543088F596229144EAFB9" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[/*  This method queries the PackageDefinition structures and builds markdown 
    files that document potential RDF Schema classes/properties based on 
    ItemTypes and RelatiosnhipTypes and their properties
*/

var inn = this.getInnovator(); 
var dest = "file";

// gets all PackageDefinitions. Can modify to get some or one.
var pkgs = inn.newItem("PackageDefinition","get");
var grps = inn.newItem("PackageGroup","get");
grps.setProperty("name","ItemType");
pkgs.addRelationship(grps);
pkgs = pkgs.apply();

for (var i = 0; i < pkgs.getItemCount(); i++)
{
    var pkg = pkgs.getItemByIndex(i);
    documentPackage(inn,pkg.getProperty("name",""),dest);
}

// return message indicating method is complete
return alert("finished");


//// Content Functions /////////////////////////////////////////////////////////

function documentPackage(inn,pkg_name,dest)
{
    // get package elements
    var pkg_groups = ["ItemType","RelationshipType"];
    var pkg = getPackageDefinition(inn,pkg_name,pkg_groups);
    var pkg_elements = pkg.getItemsByXPath("//Item[@type='PackageElement']");
    
    var msg = "";
    var nl = "\n";
    var br = "&lt;br/&gt;";
    var out = "&lt;!-- Auto-generated by action --&gt;" + nl + nl;
    out += "# " + pkg_name + " Assessment" + nl + nl;
    out += "This file does not define any part of the current base vocabulary/ontology. Not every 'class' or 'property' in this file will become part of the base ontology. It was generated to take an inventory of Aras ItemTypes and their properties." + nl + nl;
    out += "[Go To Classes](#classes) | [Go To Item/System Properties](#itemsystem-properties) | [Go To Relationship Properties](#relationship-properties) | [Go To General Properties](#general-properties)" + nl + nl;
    var itemtype_ids = "";
    
    // build content
    out += "# Classes" + nl + nl;
    for (var i = 0; i < pkg_elements.getItemCount(); i++)
    {
        var el = pkg_elements.getItemByIndex(i);
        out += printClass(inn,el.getProperty("name",""),el.getProperty("element_type",""));
        itemtype_ids += ",'" + el.getProperty("element_id","") + "'";
    }
    
    out += "# Properties" + nl + nl;
    
    var aml = itemPropQuery();
    var props = inn.applyAML(aml);
    
    out += "## Item/System Properties" + nl + nl;
    out += "These properties are shared by all SubClasses of Item." + nl + nl;
    out += printProperties(props,"item") + nl + nl;
   
    aml = relPropQuery();
    props = inn.applyAML(aml);
    
    out += "## Relationship Properties" + nl + nl;
    out += "These properties are shared by all SubClasses of Relationship." + nl + nl;
    out += printProperties(props,"relationship") + nl + nl;
   
    itemtype_ids = itemtype_ids.substr(1);
    aml = allPropQuery(itemtype_ids);
    props = inn.applyAML(aml);
    
    out += "## General Properties" + nl + nl;
    out += "These properties are shared by the domain(s) listed in each row." + nl + nl;
    out += printProperties(props,"") + nl + nl;
    
    // determine output destination and execute
    if (dest === "clipboard")
    {
        copyToBuffer(out);
        msg = "Markdown is copied to clipboard.";
    }
    else if (dest === "file")
    {
        var path = "C:\\tmp\\docs\\";
        var filename = pkg_name + ".md";
        var res = writeToFile(inn,path,filename,out);
        if (res.isError())
        {
            msg = "Failed to write to file: " + res.getErrorString();
        }
        else
        {
            msg = "Markdown written to file on server: " + path + filename;
        }
    }

}


/*  takes an array of header strings
    returns a markdown table header
    
    titles[0] | titles[1] | ... | titles[n]
    --------- | --------- | ... | ---------
*/
function printTableHeader(titles)
{
    if (!Array.isArray(titles))
        return alert(customError("printTableHeader","Parameter 'titles' must be an array of strings."));
        
    var line = "------";
    var nl = "\n";
    var out = titles[0];
    
    for (var i = 1; i < titles.length; i++)
        out += " | " + titles[i];
    
    out += nl + line;
    
    for (i = 1; i < titles.length; i++)
        out += " | " + line;    
    
    return out;
}


/*  takes an array of strings
    returns a markdown table row ending in newline
    
    content[0] | content[1] | ... | content[n]
*/
function printTableRow(content)
{
    if (!Array.isArray(content))
        return alert(customError("printTableRow","Parameter 'content' must be an array of strings."));
        
    var nl = "\n";
    var out = content[0];
    
    for (var i = 1; i < content.length; i++)
        out += " | " + content[i];
    
    out += nl;
    
    return out;
}


/*  takes an Innovator object and class/ItemType name
    returns a markdown string with title and property table
*/
function printClass(inn,classname,type)
{
    if (classname === undefined)
        return alert(customError("printClass","Parameter 'classname' cannot be undefined or empty."));
        
    var aml = classPropQuery(classname);
    var properties = inn.applyAML(aml);
    
    if (properties === undefined)
        return alert(customError("printClass","Could not retrieve ItemType with name 'classname'."));
    
    var nl = "\n";
    var out = "## " + classname + nl;
    out += nl + "*SubClass of [Item](#item)";
    if (type === "RelationshipType")
        out += " and [Relationship](#relationship)";
    out += ".*" + nl + nl;
    out += "### Properties" + nl;
    var titles = ["Label","Domain","Range","Aras Data Type","Aras Data Source"];
    var table = printTableHeader(titles);
    
    table += nl;
    
    for (var i = 0; i < properties.getItemCount(); i++)
    {
        var thisProp = properties.getItemByIndex(i);
        range = " "; //TODO
        var aras_type = thisProp.getProperty("data_type","");
        aras_type = aras_type[0].toUpperCase() + aras_type.substr(1);
        var aras_source = "";
        
        if (aras_type === "Item")
        {
            aras_source = thisProp.getPropertyAttribute("data_source","keyed_name","");
            aras_source = nameToAnchor(aras_source); 
        }
        
        if (aras_type === "List")
        {
            aras_source = thisProp.getPropertyAttribute("data_source","keyed_name","");
        }
        
        var content = [thisProp.getProperty("name",""),classname,range,aras_type,aras_source];
        table += printTableRow(content);
    }
    
    out += nl + table + nl;
    
    out += printRelationships(inn,classname);
    
    out += nl;
    
    return out;
}


/*  takes an Innovator object and a classname/itemtype name string
    returns a string containing markdown table of relationships belonging to class
*/
function printRelationships(inn,classname)
{
    var aml = classRelationshipQuery(classname);
    var rels = inn.applyAML(aml);
    
    if (rels.isError() || rels.getItemCount() <= 0)
        return "";
        
    var nl = "\n";
    var out = "### Relationships" + nl + nl;
    var headers = ["Relationship Class Name","Related Class"];
    
    var table = printTableHeader(headers) + nl;
    
    for (var i = 0; i < rels.getItemCount(); i++)
    {
        var rel = rels.getItemByIndex(i);
        var class_anchor = nameToAnchor(rel.getProperty("name",""));
        var rel_anchor = nameToAnchor(rel.getPropertyAttribute("related_id","keyed_name",""));
        
        var row = [class_anchor,rel_anchor];
        table += printTableRow(row);
    }
     
    out += table;
    //alert(classname);
    return out + nl;
}


/*  takes a collection of Property items and string indicating type of property table
    returns a string containing markdown table
*/
function printProperties(props,table_type)
{
    var prop_table = "";
    var nl = "\n";
    var br = "&lt;br/&gt;";

    var last = "";
    var prop_name = "";
    var domain = "";
    var range = " ";
    var data_type = "";
    var data_source = "";
    var prop_table = printTableHeader(["Property","Domain","Range","Aras Data Type","Aras Data Source"]);
    prop_table += nl;
    
    for (var i = 0; i < props.getItemCount(); i++)
    {
        var p = props.getItemByIndex(i);
        if (last === "")
        {
            prop_name = p.getProperty("name","");
            
            if (table_type === "item")
            {
                domain = "[Item](#item)";
            }
            else if (table_type === "relationship")
            {
                domain = "[Relationship](#relationship)";
            }
            else
            {
                domain = p.getPropertyAttribute("source_id","keyed_name","");
            }
            
            range = " ";
    
            var aras_type = p.getProperty("data_type","");
            aras_type = aras_type[0].toUpperCase() + aras_type.substr(1);
            var aras_source = "";
            
            if (aras_type === "Item")
            {
                aras_source = p.getPropertyAttribute("data_source","keyed_name","");
                aras_source = nameToAnchor(aras_source); 
            }
            
            if (aras_type === "List")
            {
                aras_source = p.getPropertyAttribute("data_source","keyed_name","");
            }
            
            data_type = aras_type;
            data_source = aras_source;
            
            last = prop_name;
        }
        else if (p.getProperty("name","") === last)
        {
            
            // if this property name matches the last, print new line in same row
            if (table_type === "item")
            {
                domain = "[Item](#item)";
            }
            else if (table_type === "relationship")
            {
                domain = "[Relationship](#relationship)";
            }
            else
            {
                if (domain.indexOf(p.getPropertyAttribute("source_id","keyed_name","")) < 0)
                    domain += br + p.getPropertyAttribute("source_id","keyed_name","");
            }
            
            var aras_type = p.getProperty("data_type","");
            aras_type = aras_type[0].toUpperCase() + aras_type.substr(1);
            var aras_source = "";
            
            if (aras_type === "Item")
            {
                aras_source = p.getPropertyAttribute("data_source","keyed_name","");
                aras_source = nameToAnchor(aras_source); 
            }
            
            if (aras_type === "List")
            {
                aras_source = p.getPropertyAttribute("data_source","keyed_name","");
            }
            
            if (data_type.indexOf(aras_type) < 0)
                data_type += br + aras_type;
                
            if (data_source.indexOf(aras_source) < 0)
                data_source += br + aras_source;
        }
        else
        {
            // else, finish prev row
            prop_table += printTableRow([last,domain,range,data_type,data_source]);
            
            // create new row and update "last"
            prop_name = p.getProperty("name","");
            
            if (table_type === "item")
            {
                domain = "[Item](#item)";
            }
            else if (table_type === "relationship")
            {
                domain = "[Relationship](#relationship)";
            }
            else
            {
                domain = p.getPropertyAttribute("source_id","keyed_name","");
            }
            
            range = " ";
    
            var aras_type = p.getProperty("data_type","");
            aras_type = aras_type[0].toUpperCase() + aras_type.substr(1);
            var aras_source = "";
            
            if (aras_type === "Item")
            {
                aras_source = p.getPropertyAttribute("data_source","keyed_name","");
                aras_source = nameToAnchor(aras_source); 
            }
            
            if (aras_type === "List")
            {
                aras_source = p.getPropertyAttribute("data_source","keyed_name","");
            }
            
            data_type = aras_type;
            data_source = aras_source;
            
            last = prop_name;
        }
    }
    
    // finish last row
    prop_table += printTableRow([last,domain,range,data_type,data_source]);
    
    return prop_table;
}


/*  takes a class/ItemType name
    returns an AML query
*/
function classPropQuery(classname)
{
    // list of default/system properties
    var CORE = "";
    CORE += "'classification','config_id','created_by_id','created_on','css',";
    CORE += "'current_state','generation','id','is_current','is_released',";
    CORE += "'keyed_name','locked_by_id','major_rev','managed_by_id',";
    CORE += "'minor_rev','modified_by_id','modified_on','new_version',";
    CORE += "'not_lockable','owned_by_id','permission_id','state','team_id'";
    
    // list of default/system properties for relationships
    var REL = "";
    REL += "'behavior','sort_order'";
    
    var aml = "";
    aml += "<AML>";
    aml += "  <Item type='Property' action='get' select='name,data_type,data_source' where=\"[Property].name not in (" + CORE + "," + REL + ")\" >";
    aml += "    <source_id>";
    aml += "      <Item type='ItemType' action='get' select='id,keyed_name,implementation_type,instance_data'>";
    aml += "        <keyed_name>" + classname + "</keyed_name>";
    aml += "      </Item>";
    aml += "    </source_id>";
    aml += "  </Item>";
    aml += "</AML>";
    
    return aml;
}


/*  takes a comma-separated list of itemtype ids wrapped in quotes: 'id0','id1',...,'idn'
    returns an AML query all properties that aren't system properties
*/
function allPropQuery(ids)
{
    // list of default/system properties
    var CORE = "";
    CORE += "'classification','config_id','created_by_id','created_on','css',";
    CORE += "'current_state','generation','id','is_current','is_released',";
    CORE += "'keyed_name','locked_by_id','major_rev','managed_by_id',";
    CORE += "'minor_rev','modified_by_id','modified_on','new_version',";
    CORE += "'not_lockable','owned_by_id','permission_id','state','team_id'";
    
    // list of default/system properties for relationships
    var REL = "";
    REL += "'behavior','related_id','source_id','sort_order'";
    
    var aml = "";
    aml += "<AML>";
    aml += "  <Item type='Property' action='get' select='name,data_type,data_source,source_id(id,keyed_name)' where=\"[Property].name not in (" + CORE + "," + REL + ") and source_id in ("+ ids +")\" >";
    aml += "  </Item>";
    aml += "</AML>";
    
    return aml;
}


/*  takes no parameters
    returns an AML query for relationship system properties
*/
function relPropQuery()
{
    // list of default/system properties for relationships
    var REL = "";
    REL += "'behavior','related_id','source_id','sort_order'";
    
    var aml = "";
    aml += "<AML>";
    aml += "  <Item type='Property' action='get' select='name,data_type,data_source,source_id(id,keyed_name)' where=\"source_id='471932C33B604C3099070F4106EE5024' and [Property].name in (" + REL + ")\" >";
    aml += "  </Item>";
    aml += "</AML>";
    
    return aml;
}


/*  takes no parameters
    returns an AML query for item system properties
*/
function itemPropQuery()
{
    // list of default/system properties
    var CORE = "";
    CORE += "'classification','config_id','created_by_id','created_on','css',";
    CORE += "'current_state','generation','id','is_current','is_released',";
    CORE += "'keyed_name','locked_by_id','major_rev','managed_by_id',";
    CORE += "'minor_rev','modified_by_id','modified_on','new_version',";
    CORE += "'not_lockable','owned_by_id','permission_id','state','team_id'";

    var aml = "";
    aml += "<AML>";
    aml += "  <Item type='Property' action='get' select='name,data_type,data_source,source_id(id,keyed_name)' where=\"source_id='483228BE6B9A4C0E99ACD55FDF328DEC' and [Property].name in (" + CORE + ")\" >";
    aml += "  </Item>";
    aml += "</AML>";
    
    return aml;
}


/*  takes a class/ItemType name
    returns an AML query
*/
function classRelationshipQuery(classname)
{
    var aml = "";
    aml += "<AML>";
    aml += "  <Item type='RelationshipType' action='get' select='name,source_id,related_id(id,keyed_name,implementation_type,instance_data)'>";
    aml += "    <source_id>";
    aml += "      <Item type='ItemType' action='get' select='id,keyed_name,implementation_type,instance_data'>";
    aml += "        <keyed_name>" + classname + "</keyed_name>";
    aml += "      </Item>";
    aml += "    </source_id>";
    aml += "  </Item>";
    aml += "</AML>";
    
    return aml;
}


/*  takes an Innovator object, package name, and package group name
    returns the package structure
    
    PackageDefinition > related PackageGroup(s) > related PackageElements
*/
function getPackageDefinition(inn,name,groups)
{
    var pkg = inn.newItem("PackageDefinition","get");
    pkg.setProperty("name",name);
    pkg.setAttribute("select","name");
    
    var pkg_group = inn.newItem("PackageGroup","get");
    if (groups)
    {
        pkg_group.setProperty("name","'" + groups.join("','") + "'");
        pkg_group.setPropertyAttribute("name","condition","in");
    }
    pkg_group.setAttribute("select","name");
    
    var pkg_element = inn.newItem("PackageElement","get");
    pkg_element.setAttribute("select","name,element_id,element_type");
    
    pkg_group.addRelationship(pkg_element);
    pkg.addRelationship(pkg_group);
    
    return pkg.apply();
}


function nameToAnchor(name)
{
    var anchor = name.toLowerCase();
    anchor = anchor.replace(/\s/g,"-");
    return "[" + name + "](#" + anchor + ")"; 
}


//// Output Functions //////////////////////////////////////////////////////////

/*  takes a function name and error message
    returns a formatted error message
    
    Error in function [func]: err
*/
function customError(func,err)
{
    return "Error in function [" + func + "]: " + err;
}


/*  takes an Innovator object, file path, file name, and content for file
    calls a server-side method and writes contents to specified file on the server
*/
function writeToFile(inn,path,name,content)
{
    var aml = "";
    aml += "<AML>";
    aml += "<Item type='Method' action='Write to File'>";
    aml += "<path>" + path + "</path>";
    aml += "<filename>" + name + "</filename>";
    aml += "<content>" + content + "</content>";
    aml += "</Item>";
    aml += "</AML>";
    
    return inn.applyAML(aml);
}


/*  takes a string
    writes the string to the clipboard
*/

function copyToBuffer(buffer) {
    if (window.clipboardData) {
        window.clipboardData.setData('Text', buffer);
    } else {
        aras.utils.setClipboardData('Text', buffer, window);
    }
}

]]></method_code>
  <method_type>JavaScript</method_type>
  <name>RDF Create MD Doc</name>
 </Item>
</AML>